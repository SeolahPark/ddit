/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-12-18 08:54:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view.service;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mapView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    <!--  전문가가 자신의 서비스 위치를 보여줄 때 사용 -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"utf-8\">\r\n");
      out.write("<style>\r\n");
      out.write(".customoverlay {position:relative;bottom:85px;border-radius:6px;border: 1px solid #ccc;border-bottom:2px solid #ddd;float:left;}\r\n");
      out.write(".customoverlay:nth-of-type(n) {border:0; box-shadow:0px 1px 2px #888;}\r\n");
      out.write(".customoverlay a {display:block;text-decoration:none;color:#000;text-align:center;border-radius:6px;font-size:14px;font-weight:bold;overflow:hidden;background: #d95050;background: #d95050 url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/arrow_white.png) no-repeat right 14px center;}\r\n");
      out.write(".customoverlay .title {display:block;text-align:center;background:#fff;margin-right:35px;padding:10px 15px;font-size:14px;font-weight:bold;}\r\n");
      out.write(".customoverlay:after {content:'';position:absolute;margin-left:-12px;left:50%;bottom:-12px;width:22px;height:12px;background:url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div style=\"width : 100%\">\r\n");
      out.write("<div id=\"map\" style=\"width:500px; height:350px; overflow:hidden\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=805f435fff584ac35854286c3ec0233d&libraries=services\"></script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.print( request.getContextPath() );
      out.write("/js/mapSearchwithMarker.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("var logitutde = 36.3225501550863;\r\n");
      out.write("var latitude = 127.40328415685;\r\n");
      out.write("var link = 'https://map.kakao.com/link/map/11394059';\r\n");
      out.write("\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("  mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(logitutde, latitude), // 지도의 중심좌표 // 중심좌표를 db에서 가져오기\r\n");
      out.write("//        center: new kakao.maps.LatLng(127.31232050686, 36.3904624559243), // 내가 바꾼 기본 좌표\r\n");
      out.write("        level: 4 // 지도의 기본 확대 레벨\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("// 컨트롤창-------------------------------------------------------------------------------------------\r\n");
      out.write("\r\n");
      out.write("//일반 지도와 스카이뷰로 지도 타입을 전환할 수 있는 지도타입 컨트롤을 생성합니다\r\n");
      out.write("var mapTypeControl = new kakao.maps.MapTypeControl();\r\n");
      out.write("\r\n");
      out.write("// 지도에 컨트롤을 추가해야 지도위에 표시됩니다\r\n");
      out.write("// kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다\r\n");
      out.write("map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);\r\n");
      out.write("\r\n");
      out.write("// 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\r\n");
      out.write("var zoomControl = new kakao.maps.ZoomControl();\r\n");
      out.write("map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);\r\n");
      out.write("\r\n");
      out.write("// 마커-------------------------------------------------------------------------------------------\r\n");
      out.write("\r\n");
      out.write("/* var imageSrc = '../../images/check.png', // 마커이미지의 주소입니다 ==> 이미지 해상도 고려 */\r\n");
      out.write(" var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png', // 마커이미지의 주소입니다\r\n");
      out.write("\r\n");
      out.write("\timageSize = new kakao.maps.Size(64, 69), // 마커이미지의 크기입니다\r\n");
      out.write("    imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n");
      out.write("\r\n");
      out.write("// 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n");
      out.write("var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption),\r\n");
      out.write("    markerPosition = new kakao.maps.LatLng(logitutde, latitude); // 마커가 표시될 위치입니다\r\n");
      out.write("    \r\n");
      out.write("// 마커를 생성합니다\r\n");
      out.write("var marker = new kakao.maps.Marker({\r\n");
      out.write("  position: markerPosition,\r\n");
      out.write("  image: markerImage // 마커이미지 설정 \r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("marker.setMap(map);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 커스텀 오버레이가 표시될 위치입니다 \r\n");
      out.write("var position = new kakao.maps.LatLng(logitutde, latitude);  // 마커와 같은 위치\r\n");
      out.write("\r\n");
      out.write("// 커스텀 오버레이를 생성합니다\r\n");
      out.write("var customOverlay = new kakao.maps.CustomOverlay({\r\n");
      out.write("    map: map,\r\n");
      out.write("    position: position,\r\n");
      out.write("    yAnchor: 1 \r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// ------------------------------------------------------------------------------------------------\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
